Index: src/ShieldUser.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>class ShieldUser extends Character {\n\n    public ShieldUser(String name, int hp, int atk, int def, CharacterType type) {\n\n        super(name, hp, atk, def, CharacterType.SHIELDUSER);\n\n    }\n}\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/ShieldUser.java b/src/ShieldUser.java
--- a/src/ShieldUser.java	
+++ b/src/ShieldUser.java	
@@ -6,3 +6,4 @@
 
     }
 }
+
Index: src/Character.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>public abstract class Character {\n\n    protected String name;\n    protected int hp;\n    protected int atk;\n    protected int def;\n    protected CharacterType type;\n\n    /**\n     * Constructs a Character object with the specified attributes.\n     *\n     * @param name name\n     * @param hp health\n     * @param atk attack\n     * @param def defense\n     * @param type class\n     */\n    public Character(String name, int hp, int atk, int def, CharacterType type) {\n        this.name = name;\n        this.hp = hp;\n        this.atk = atk;\n        this.def = def;\n        this.type = type;\n    }\n\n    public String getName() {\n        return name;\n    }\n\n    public int getHp() {\n        return hp;\n    }\n\n    public int getAtk() {\n        return atk;\n    }\n\n    public int getDef() {\n        return def;\n    }\n\n    public CharacterType getType() {\n        return type;\n    }\n\n    public void setHp(int newHp) {\n        this.hp = newHp;\n    }\n\n    public void setAtk(int newAtk) {\n        this.atk = newAtk;\n    }\n\n    public void setDef(int newDef) {\n        this.def = newDef;\n    }\n}\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/Character.java b/src/Character.java
--- a/src/Character.java	
+++ b/src/Character.java	
@@ -1,57 +1,53 @@
-public abstract class Character {
+public abstract class Character
+{
+    private String name;
+    private int atk;
+    private int hp;
+    private int def;
+    private CharacterType type;
 
-    protected String name;
-    protected int hp;
-    protected int atk;
-    protected int def;
-    protected CharacterType type;
-
-    /**
-     * Constructs a Character object with the specified attributes.
-     *
-     * @param name name
-     * @param hp health
-     * @param atk attack
-     * @param def defense
-     * @param type class
-     */
-    public Character(String name, int hp, int atk, int def, CharacterType type) {
+    public Character(String name, int hp, int atk, int def, CharacterType characterType)
+    {
         this.name = name;
-        this.hp = hp;
         this.atk = atk;
+        this.hp = hp;
         this.def = def;
-        this.type = type;
+        this.type = characterType;
+    }
+
+    protected int setAtk()
+    {
+        return atk;
     }
 
-    public String getName() {
-        return name;
+    protected void setHp()
+    {
+
     }
 
-    public int getHp() {
-        return hp;
+    protected void setDef()
+    {
+
     }
 
-    public int getAtk() {
+    protected int getAtk()
+    {
         return atk;
     }
 
-    public int getDef() {
+    protected int getHp()
+    {
+        return hp;
+    }
+
+    protected int getDef()
+    {
         return def;
     }
 
-    public CharacterType getType() {
-        return type;
-    }
 
-    public void setHp(int newHp) {
-        this.hp = newHp;
-    }
 
-    public void setAtk(int newAtk) {
-        this.atk = newAtk;
-    }
 
-    public void setDef(int newDef) {
-        this.def = newDef;
-    }
 }
+
+
Index: src/Swordsman.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>class Swordsman extends Character {\n\n    public Swordsman(String name, int hp, int atk, int def, CharacterType type) {\n\n        super(name, hp, atk, def, CharacterType.SWORDSMAN);\n\n    }\n}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/Swordsman.java b/src/Swordsman.java
--- a/src/Swordsman.java	
+++ b/src/Swordsman.java	
@@ -5,4 +5,4 @@
         super(name, hp, atk, def, CharacterType.SWORDSMAN);
 
     }
-}
\ No newline at end of file
+}
Index: src/Healer.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>class Healer extends Character {\n\n    public Healer(String name, int hp, int atk, int def, CharacterType type) {\n\n        super(name, hp, atk, def, CharacterType.HEALER);\n\n    }\n}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/Healer.java b/src/Healer.java
--- a/src/Healer.java	
+++ b/src/Healer.java	
@@ -5,4 +5,4 @@
         super(name, hp, atk, def, CharacterType.HEALER);
 
     }
-}
\ No newline at end of file
+}
Index: src/Marksman.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>class Marksman extends Character {\n\n    public Marksman(String name, int hp, int atk, int def, CharacterType type) {\n\n        super(name, hp, atk, def, CharacterType.MARKSMAN);\n\n    }\n}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/Marksman.java b/src/Marksman.java
--- a/src/Marksman.java	
+++ b/src/Marksman.java	
@@ -5,4 +5,4 @@
         super(name, hp, atk, def, CharacterType.MARKSMAN);
 
     }
-}
\ No newline at end of file
+}
Index: src/Menu.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/Menu.java b/src/Menu.java
new file mode 100644
--- /dev/null	
+++ b/src/Menu.java	
@@ -0,0 +1,204 @@
+import javax.swing.*;
+import java.io.PrintStream;
+import java.util.ArrayList;
+import java.util.Scanner;
+public class Menu {
+    public static final Scanner scanner;
+    public static final ArrayList<String> options;
+    private static String optMessage;
+
+    public Menu() {
+    }
+
+    public static void menuLoop() {
+        System.out.println(optMessage);
+        String choice = scanner.nextLine();
+
+        for (int option = Integer.parseInt(choice); option != 0; option = Integer.parseInt(choice)) {
+            if (option > 0 && option < options.size()) {
+                System.out.printf("Selected option %d, %s%n", option, options.get(option));
+                System.out.println("Press any Enter key to continue");
+                scanner.nextLine();
+            }
+
+            switch (option) {
+                case 1:
+                    createTeam();
+                    break;
+
+                case 2:
+
+                    break;
+                case 3:
+
+                    break;
+                case 4:
+
+                    break;
+                default:
+                    System.out.printf("Option %d not recognizable%n", option);
+            }
+
+            System.out.println("Press any Enter key to see menu again");
+            scanner.nextLine();
+            System.out.println(optMessage);
+            choice = scanner.nextLine();
+        }
+
+        System.out.println("Thank you for playing!");
+    }
+
+    static {
+        scanner = new Scanner(System.in);
+        options = new ArrayList();
+        options.add("Exit");
+        options.add("Create Team");
+        options.add("Manage Team");
+        options.add("About Members");
+        optMessage = " \n\n Store and access details of the options and actions of the members in the party and also details about foe.\n \tMenu Options\n";
+        StringBuilder sb = new StringBuilder();
+        sb.append(optMessage);
+
+        for (int i = 0; i < options.size(); ++i) {
+            sb.append(String.format("\t%d. %s\n", i, options.get(i)));
+        }
+
+        optMessage = sb.toString();
+    }
+
+    public static void createTeam() {
+        if (!existingTeam()) {
+            //initialize new team within an arrayList
+        } else {
+            System.out.println("Error, there is already an existing team. Press enter to return back to menu");
+            scanner.nextLine();
+        }
+
+    }
+
+    public static boolean existingTeam() {
+        //there is an existing team return true or return false
+        return false;
+    }
+
+
+    public static void ManageTeamMenu() {
+        System.out.println("1. Create New Character");
+        System.out.println("2. Remove Character");
+        System.out.println("3. Edit Current Character");
+        int option = scanner.nextInt();
+        switch (option) {
+            case 1:
+                addCharacter();
+                break;
+
+            case 2:
+                removeCharacter();
+                break;
+
+            case 3:
+                editCurrentCharacter();
+                break;
+        }
+
+    }
+
+
+    public static void addCharacter() {
+        if (!filledTeams())
+        {
+            System.out.println("Pick a character to add:");
+            System.out.println("1. Healer");
+            System.out.println("2. Marksman");
+            System.out.println("3. Swordsman");
+            System.out.println("4. ShieldUser");
+            int characterOption = scanner.nextInt();
+            if (!CheckCharacter(characterOption))
+            {
+                //add character here
+                System.out.println("Success! Member has been added.");
+                scanner.nextLine();
+            }
+            else
+            {
+                System.out.println("Member already exists. Please enter to return back to menu.");
+                scanner.nextLine();
+            }
+        }
+        else
+        {
+            System.out.println("Error, team is full. Press enter to return back to menu");
+            scanner.nextLine();
+        }
+    }
+
+    public static boolean filledTeams() {
+        //if the team is filled (member number equal to 4) then return true else return false
+        return false;
+    }
+
+
+    public static void removeCharacter() {
+        System.out.println("1. Healer");
+        System.out.println("2. Marksman");
+        System.out.println("3. Swordsman");
+        System.out.println("4. ShieldUser");
+        int option = scanner.nextInt();
+        if (CheckCharacter(option))
+        {
+            // removeCharacter()
+        }
+        else {
+            System.out.println("Error, there is no healer in current team");
+        }
+    }
+
+
+    public static void editCurrentCharacter() {
+        System.out.println("Pick a character to edit:");
+        System.out.println("1. Healer");
+        System.out.println("2. Marksman");
+        System.out.println("3. Swordsman");
+        System.out.println("4. ShieldUser");
+        int characterOption = scanner.nextInt();
+
+        if (CheckCharacter(characterOption))
+        {
+            System.out.println("Pick what to add:");
+            System.out.println("1. add atk");
+            System.out.println("2. add hp");
+            System.out.println("3. add defense");
+            int addOption = scanner.nextInt();
+        }
+    }
+
+
+    public static void add(int addOption)
+    {
+
+    }
+
+
+
+    public static boolean CheckCharacter (int option)
+    {
+        switch (option) {
+            case 1:
+                // check if there is a Healer in team already
+                return true;
+            case 2:
+                // check if there is a Marksman in team already
+                return true;
+            case 3:
+                // check if there is a Swordsman in team already
+                return true;
+            case 4:
+                // check if there is a ShieldUser in team already
+                return true;
+        }
+        return false;
+    }
+}
+
+
+
Index: .idea/workspace.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+><?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<project version=\"4\">\n  <component name=\"AutoImportSettings\">\n    <option name=\"autoReloadType\" value=\"SELECTIVE\" />\n  </component>\n  <component name=\"ChangeListManager\">\n    <list default=\"true\" id=\"a4f87bc1-a171-4809-b3e9-e4f979fb00ae\" name=\"Changes\" comment=\"Initial commit\">\n      <change afterPath=\"$PROJECT_DIR$/src/Data.java\" afterDir=\"false\" />\n      <change afterPath=\"$PROJECT_DIR$/src/Main.java\" afterDir=\"false\" />\n      <change afterPath=\"$PROJECT_DIR$/src/Menu.java\" afterDir=\"false\" />\n    </list>\n    <option name=\"SHOW_DIALOG\" value=\"false\" />\n    <option name=\"HIGHLIGHT_CONFLICTS\" value=\"true\" />\n    <option name=\"HIGHLIGHT_NON_ACTIVE_CHANGELIST\" value=\"false\" />\n    <option name=\"LAST_RESOLUTION\" value=\"IGNORE\" />\n  </component>\n  <component name=\"FileTemplateManagerImpl\">\n    <option name=\"RECENT_TEMPLATES\">\n      <list>\n        <option value=\"Class\" />\n      </list>\n    </option>\n  </component>\n  <component name=\"Git.Settings\">\n    <option name=\"RECENT_GIT_ROOT_PATH\" value=\"$PROJECT_DIR$\" />\n  </component>\n  <component name=\"ProjectColorInfo\"><![CDATA[{\n  \"associatedIndex\": 0\n}]]></component>\n  <component name=\"ProjectId\" id=\"2cjLD38L3ByBJot2rZJlUrmoMnO\" />\n  <component name=\"ProjectLevelVcsManager\" settingsEditedManually=\"true\" />\n  <component name=\"ProjectViewState\">\n    <option name=\"hideEmptyMiddlePackages\" value=\"true\" />\n    <option name=\"showLibraryContents\" value=\"true\" />\n  </component>\n  <component name=\"PropertiesComponent\"><![CDATA[{\n  \"keyToString\": {\n    \"Application.Main.executor\": \"Run\",\n    \"RunOnceActivity.OpenProjectViewOnStart\": \"true\",\n    \"RunOnceActivity.ShowReadmeOnStart\": \"true\",\n    \"git-widget-placeholder\": \"main\",\n    \"kotlin-language-version-configured\": \"true\"\n  }\n}]]></component>\n  <component name=\"SharedIndexes\">\n    <attachedChunks>\n      <set>\n        <option value=\"jdk-21.0.1-openjdk-21.0.1-4caba194b151-9b16c6e2\" />\n      </set>\n    </attachedChunks>\n  </component>\n  <component name=\"SpellCheckerSettings\" RuntimeDictionaries=\"0\" Folders=\"0\" CustomDictionaries=\"0\" DefaultDictionary=\"application-level\" UseSingleDictionary=\"true\" transferred=\"true\" />\n  <component name=\"TaskManager\">\n    <task active=\"true\" id=\"Default\" summary=\"Default task\">\n      <changelist id=\"a4f87bc1-a171-4809-b3e9-e4f979fb00ae\" name=\"Changes\" comment=\"\" />\n      <created>1708619919070</created>\n      <option name=\"number\" value=\"Default\" />\n      <option name=\"presentableId\" value=\"Default\" />\n      <updated>1708619919070</updated>\n    </task>\n    <task id=\"LOCAL-00001\" summary=\"Initial commit\">\n      <option name=\"closed\" value=\"true\" />\n      <created>1708620129432</created>\n      <option name=\"number\" value=\"00001\" />\n      <option name=\"presentableId\" value=\"LOCAL-00001\" />\n      <option name=\"project\" value=\"LOCAL\" />\n      <updated>1708620129432</updated>\n    </task>\n    <option name=\"localTasksCounter\" value=\"2\" />\n    <servers />\n  </component>\n  <component name=\"Vcs.Log.Tabs.Properties\">\n    <option name=\"TAB_STATES\">\n      <map>\n        <entry key=\"MAIN\">\n          <value>\n            <State />\n          </value>\n        </entry>\n      </map>\n    </option>\n  </component>\n  <component name=\"VcsManagerConfiguration\">\n    <MESSAGE value=\"Initial commit\" />\n    <option name=\"LAST_COMMIT_MESSAGE\" value=\"Initial commit\" />\n  </component>\n</project>
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/.idea/workspace.xml b/.idea/workspace.xml
--- a/.idea/workspace.xml	
+++ b/.idea/workspace.xml	
@@ -4,10 +4,15 @@
     <option name="autoReloadType" value="SELECTIVE" />
   </component>
   <component name="ChangeListManager">
-    <list default="true" id="a4f87bc1-a171-4809-b3e9-e4f979fb00ae" name="Changes" comment="Initial commit">
-      <change afterPath="$PROJECT_DIR$/src/Data.java" afterDir="false" />
-      <change afterPath="$PROJECT_DIR$/src/Main.java" afterDir="false" />
-      <change afterPath="$PROJECT_DIR$/src/Menu.java" afterDir="false" />
+    <list default="true" id="a4f87bc1-a171-4809-b3e9-e4f979fb00ae" name="Changes" comment="Trying to merge new files">
+      <change beforePath="$PROJECT_DIR$/.idea/workspace.xml" beforeDir="false" afterPath="$PROJECT_DIR$/.idea/workspace.xml" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/src/Battlefield.java" beforeDir="false" afterPath="$PROJECT_DIR$/src/Battlefield.java" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/src/Character.java" beforeDir="false" afterPath="$PROJECT_DIR$/src/Character.java" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/src/CharacterType.java" beforeDir="false" afterPath="$PROJECT_DIR$/src/CharacterType.java" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/src/Game.java" beforeDir="false" afterPath="$PROJECT_DIR$/src/Game.java" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/src/Healer.java" beforeDir="false" afterPath="$PROJECT_DIR$/src/Healer.java" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/src/Marksman.java" beforeDir="false" afterPath="$PROJECT_DIR$/src/Marksman.java" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/src/Swordsman.java" beforeDir="false" afterPath="$PROJECT_DIR$/src/Swordsman.java" afterDir="false" />
     </list>
     <option name="SHOW_DIALOG" value="false" />
     <option name="HIGHLIGHT_CONFLICTS" value="true" />
@@ -24,9 +29,25 @@
   <component name="Git.Settings">
     <option name="RECENT_GIT_ROOT_PATH" value="$PROJECT_DIR$" />
   </component>
-  <component name="ProjectColorInfo"><![CDATA[{
-  "associatedIndex": 0
-}]]></component>
+  <component name="GitLabMergeRequestFiltersHistory">{
+  &quot;lastFilter&quot;: {
+    &quot;state&quot;: &quot;OPENED&quot;,
+    &quot;assignee&quot;: {
+      &quot;type&quot;: &quot;org.jetbrains.plugins.gitlab.mergerequest.ui.filters.GitLabMergeRequestsFiltersValue.MergeRequestsMemberFilterValue.MergeRequestsAssigneeFilterValue&quot;,
+      &quot;username&quot;: &quot;syed.omar&quot;,
+      &quot;fullname&quot;: &quot;Syed OMAR&quot;
+    }
+  }
+}</component>
+  <component name="GitLabMergeRequestsSettings">{
+  &quot;selectedUrlAndAccountId&quot;: {
+    &quot;first&quot;: &quot;https://csgit.ucalgary.ca/syed.omar/groupproject.git&quot;,
+    &quot;second&quot;: &quot;ffbbc4b7-7632-4e67-86f1-a79e3ed4c704&quot;
+  }
+}</component>
+  <component name="ProjectColorInfo">{
+  &quot;associatedIndex&quot;: 0
+}</component>
   <component name="ProjectId" id="2cjLD38L3ByBJot2rZJlUrmoMnO" />
   <component name="ProjectLevelVcsManager" settingsEditedManually="true" />
   <component name="ProjectViewState">
@@ -38,7 +59,7 @@
     "Application.Main.executor": "Run",
     "RunOnceActivity.OpenProjectViewOnStart": "true",
     "RunOnceActivity.ShowReadmeOnStart": "true",
-    "git-widget-placeholder": "main",
+    "git-widget-placeholder": "Demo2",
     "kotlin-language-version-configured": "true"
   }
 }]]></component>
